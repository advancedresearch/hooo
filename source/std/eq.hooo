use cong;
use prop;

sym prop_eq;

fn eq_ty : true -> (prop_eq' : prop' => prop' => prop') {
    axiom eq_ty : true -> (prop_eq' : prop' => prop' => prop');
    x : true;
    let r = eq_ty(x) : (prop_eq' : prop' => prop' => prop');
    return r;
}

fn eq_sym_def : true -> prop_eq' == sym(a, sym(b, a' == b')) {
    axiom eq_sym_def : true -> prop_eq' == sym(a, sym(b, a' == b'));
    x : true;
    let r = eq_sym_def(x) : prop_eq' == sym(a, sym(b, a' == b'));
    return r;
}

fn eq_def : true -> prop_eq'(a, b) == (a == b) {
    use eq_cong;
    use eq_sym_def;
    use eq_ty;
    use cong_fun_bin_eq;
    use cong_fun_eq;
    use cong_in_arg;

    x : true;

    let y2 = eq_cong(x) : cong'(prop_eq');
    let y3 = eq_sym_def(x) : prop_eq' == sym(a, sym(b, a' == b'));
    let y4 = cong_in_arg(y2, y3) : cong'(sym(a, sym(b, a' == b')));
    let y5 = eq_ty(x) : (prop_eq' : prop' => prop' => prop');
    let y6 = cong_fun_bin_eq(y2, y4, y5, y3) :
        prop_eq'(a, b) == sym(a, sym(b, a' == b'))(a, b);
    let r = y6() : prop_eq'(a, b) == (a == b);
    return r;
}

fn eq_cong : true -> cong'(prop_eq') {
    axiom eq_cong : true -> cong'(prop_eq');
    x : true;
    let r = eq_cong(x) : cong'(prop_eq');
    return r;
}

fn eq_refl : true -> a == a {
    use refl;

    x : true;

    let r = refl(refl, refl) : a == a;
    return r;
}

fn eq_symmetry : a == b -> b == a {
    use fst;
    use snd;

    x : a == b;
    let y = fst(x) : a => b;
    let z = snd(x) : b => a;

    use refl;
    let r = refl(z, y) : b == a;
    return r;
}

fn eq_transitivity : (a == b) & (b == c)  -> (a == c) {
    use fst;
    use snd;

    x : a == b;
    y : b == c;
    let x1 = fst(x) : a => b;
    let x2 = snd(x) : b => a;
    let x3 = fst(y) : b => c;
    let x4 = snd(y) : c => b;

    use imply_transitivity;
    let x5 = imply_transitivity(x1, x3) : a => c;
    let x6 = imply_transitivity(x4, x2) : c => a;

    use refl;
    let x7 = refl(x5, x6) : a == c;
    return x7;
}

fn eq_transitivity_sym : (a == b) & (c == b)  ->  (a == c) {
    use eq_symmetry;
    use eq_transitivity;

    x : a == b;
    y : c == b;
    
    let y2 = eq_symmetry(y) : b == c;
    let r = eq_transitivity(x, y2) : a == c;
    return r;
}

fn eq_transitivity_rev_sym : (a == b) & (a == c) -> (b == c) {
    use eq_symmetry;
    use eq_transitivity;

    x : a == b;
    y : a == c;

    let x2 = eq_symmetry(x) : b == a;
    let r = eq_transitivity(x2, y) : b == c;
    return r;
}

fn eq_modus_tollens : (a == b)  ->  (!a == !b) {
    use fst;
    use modus_tollens;
    use refl;
    use snd;

    x : a == b;
 
    let x2 = fst(x) : a => b;
    let x3 = snd(x) : b => a; 
    let x4 = modus_tollens(x2) : !b => !a;
    let x5 = modus_tollens(x3) : !a => !b;
    let r = refl(x5, x4) : !a == !b;
    return r;
}

fn eq_to_left : (a == b) & b -> a {
    use snd;

    x : a == b;
    y : b;

    let x2 = snd(x) : b => a;
    let r = x2(y) : a;
    return r;
}

fn eq_to_right : (a == b) & a -> b {
    use fst;

    x : a == b;
    y : a;

    let x2 = fst(x) : a => b;
    let r = x2(y) : b;
    return r;
}

fn eq_from_and : a & b  ->  a == b {
    use imply_lift;
    use refl;

    x : a;
    y : b;

    let x2 = imply_lift(y) : a => b;
    let x3 = imply_lift(x) : b => a;
    let r = refl(x2, x3) : a == b;
    return r;
}

