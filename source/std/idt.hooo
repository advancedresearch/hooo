/// # Identity Type
///
/// Martin-LÃ¶f Identity Type is used in Dependent Types and Homotopy Type Theory (HoTT).
///
/// In Dependent Types, an Identity Type is analoguous to definitional equality.
///
/// In HoTT, an identity type is used to create a path space between two points.

use z;
use type;
use I;
use i0;
use i1;

/// Used for identity types e.g. `Id'(a, b1, b2)`.
sym Id;
/// Reflexivity.
sym idt_r;
/// Symmetry.
sym idt_s;
/// Transitivity.
sym idt_t;
/// Interval.
sym idt_i;

fn idt_type_formation : (a : type'(z')) & (b1 : a) & (b2 : a)
-> (Id'(a, b1, b2) : type'(z')) {
    axiom idt_type_formation : (a : type'(z')) & (b1 : a) & (b2 : a)
        -> (Id'(a, b1, b2) : type'(z'));
    x : (a : type'(z')) & (b1 : a) & (b2 : a);
    let r = idt_type_formation(x) : (Id'(a, b1, b2) : type'(z'));
    return r;
}

fn idt_eq_ty : (a1 == a2) -> (p : Id'(a1, b1, b2)) == (p : Id'(a2, b1, b2)) {
    axiom idt_eq_ty : (a1 == a2) -> (p : Id'(a1, b1, b2)) == (p : Id'(a2, b1, b2));
    x : (a1 == a2);
    let r = idt_eq_ty(x) : (p : Id'(a1, b1, b2)) == (p : Id'(a2, b1, b2));
    return r;
}

fn idt_eq_left : (b1 == b2) -> (p : Id'(a, b1, b3)) == (p : Id'(a, b2, b3)) {
    axiom idt_eq_left : (b1 == b2) -> (p : Id'(a, b1, b3)) == (p : Id'(a, b2, b3));
    x : (b1 == b2);
    let r = idt_eq_left(x) : (p : Id'(a, b1, b3)) == (p : Id'(a, b2, b3));
    return r;
}

fn idt_eq_right : (b1 == b2) -> (p : Id'(a, b3, b1)) == (p : Id'(a, b3, b2)) {
    axiom idt_eq_right : (b1 == b2) -> (p : Id'(a, b3, b1)) == (p : Id'(a, b3, b2));
    x : (b1 == b2);
    let r = idt_eq_right(x) : (p : Id'(a, b3, b1)) == (p : Id'(a, b3, b2));
    return r;
}

fn idt_refl_from : (b : a) -> (idt_r'(b) : Id'(a, b, b)) {
    axiom idt_refl_from : (b : a) -> (idt_r'(b) : Id'(a, b, b));
    x : (b : a);
    let r = idt_refl_from(x) : (idt_r'(b) : Id'(a, b, b));
    return r;
}

fn idt_refl_to : (p : Id'(a, b, b)) -> (b : a) {
    axiom idt_refl_to : (p : Id'(a, b, b)) -> (b : a);
    x : (p : Id'(a, b, b));
    let r = idt_refl_to(x) : (b : a);
    return r;
}

fn idt_symmetry : (p : Id'(a, b1, b2)) -> (idt_s'(p) : Id'(a, b2, b1)) {
    axiom idt_symmetry : (p : Id'(a, b1, b2)) -> (idt_s'(p) : Id'(a, b2, b1));
    x : (p : Id'(a, b1, b2));
    let r = idt_symmetry(x) : (idt_s'(p) : Id'(a, b2, b1));
    return r;
}

fn idt_transitivity :
    (p : Id'(a, b1, b2)) & (q : Id'(a, b2, b3)) -> (idt_t'(p, q) : Id'(a, b1, b3))
{
    axiom idt_transitivity : (p : Id'(a, b1, b2)) & (q : Id'(a, b2, b3))
        -> (idt_t'(p, q) : Id'(a, b1, b3));
    x : (p : Id'(a, b1, b2)) & (q : Id'(a, b2, b3));
    let r = idt_transitivity(x) : (idt_t'(p, q) : Id'(a, b1, b3));
    return r;
}

fn idt_left : (p : Id'(a, b1, b2)) -> (idt_t'(p, idt_s'(p)) : Id'(a, b1, b1)) {
    use idt_refl_to;
    use idt_symmetry;
    use idt_transitivity;
 
    x : (p : Id'(a, b1, b2));

    let y = idt_symmetry(x) : (idt_s'(p) : Id'(a, b2, b1));
    let r = idt_transitivity(x, y) : (idt_t'(p, idt_s'(p)) : Id'(a, b1, b1));
    return r;
}

fn idt_right : (p : Id'(a, b1, b2)) -> (idt_t'(idt_s'(p), p) : Id'(a, b2, b2)) {
    use idt_refl_to;
    use idt_symmetry;
    use idt_transitivity;

    x : (p : Id'(a, b1, b2));

    let y = idt_symmetry(x) : (idt_s'(p) : Id'(a, b2, b1));
    let r = idt_transitivity(y, x) : (idt_t'(idt_s'(p), p) : Id'(a, b2, b2));
    return r;
}

fn idt_left_mem : (p : Id'(a, b1, b2)) -> (b1 : a) {
    use idt_left;
    use idt_refl_to;
 
    x : (p : Id'(a, b1, b2));

    let y = idt_left(x) : (idt_t'(p, idt_s'(p)) : Id'(a, b1, b1));
    let r = idt_refl_to(y) : (b1 : a);
    return r;
}

fn idt_right_mem : (p : Id'(a, b1, b2)) -> (b2 : a) {
    use idt_right;
    use idt_refl_to;

    x : (p : Id'(a, b1, b2));

    let y = idt_right(x) : (idt_t'(idt_s'(p), p) : Id'(a, b2, b2));
    let r = idt_refl_to(y) : (b2 : a);
    return r;
}

fn idt_from_interval :
    (a : type'(z')) & (f : I' => a) -> (idt_i'(f) : Id'(a, f(i0'), f(i1')))
{
    axiom idt_from_interval : (a : type'(z')) & (f : I' => a)
        -> (idt_i'(f) : Id'(a, f(i0'), f(i1')));
    x : (a : type'(z')) & (f : I' => a);
    let r = idt_from_interval(x) : (idt_i'(f) : Id'(a, f(i0'), f(i1')));
    return r;
}

fn idt_members_from_q :
    (a : type'(z')) & ((a1 ~~ a2) : I' => a) -> (a1 : a) & (a2 : a)
{
    use eq_to_right;
    use idt_from_interval;
    use idt_left_mem;
    use idt_right_mem;
    use iq_left;
    use iq_right;
    use refl;
    use triv;
    use ty_eq_left;

    x : (a : type'(z')) & ((a1 ~~ a2) : I' => a);

    let y = idt_from_interval(x) :
        (idt_i'(a1 ~~ a2) : Id'(a, (a1 ~~ a2)(i0'), (a1 ~~ a2)(i1')));
    let y2 = idt_left_mem(y) : ((a1 ~~ a2)(i0') : a);
    let y3 = idt_right_mem(y) : ((a1 ~~ a2)(i1') : a);
    let y4 = triv(iq_left) : (a1 ~~ a2)(i0') == a1;
    let y5 = triv(iq_right) : (a1 ~~ a2)(i1') == a2;
    let y6 = ty_eq_left(y4) : ((a1 ~~ a2)(i0') : a) == (a1 : a);
    let y7 = ty_eq_left(y5) : ((a1 ~~ a2)(i1') : a) == (a2 : a);
    let y8 = eq_to_right(y6, y2) : (a1 : a);
    let y9 = eq_to_right(y7, y3) : (a2 : a);
    let r = refl(y8, y9) : (a1 : a) & (a2 : a);
    return r;
}

fn idt_to_iq : (p : Id'(a, a1, a2)) -> ((a1 ~~ a2) : I' => a) {
    use idt_left_mem;
    use idt_right_mem;
    use iq_ty;

    x : (p : Id'(a, a1, a2));

    let y1 = idt_left_mem(x) : (a1 : a);
    let y2 = idt_right_mem(x) : (a2 : a);
    let r = iq_ty(y1, y2) : ((a1 ~~ a2) : I' => a);
    return r;
}

fn idt_trans_refl_left : (p : Id'(a, a1, a2)) -> idt_t'(idt_r'(a1), p) == p {
    axiom idt_trans_refl_left : (p : Id'(a, a1, a2)) -> idt_t'(idt_r'(a1), p) == p;
    x : (p : Id'(a, a1, a2));
    let r = idt_trans_refl_left(x) : idt_t'(idt_r'(a1), p) == p;
    return r;
}

fn idt_trans_refl_right : (p : Id'(a, a1, a2)) -> idt_t'(p, idt_r'(a2)) == p {
    axiom idt_trans_refl_right : (p : Id'(a, a1, a2)) -> idt_t'(p, idt_r'(a2)) == p;
    x : (p : Id'(a, a1, a2));
    let r = idt_trans_refl_right(x) : idt_t'(p, idt_r'(a2)) == p;
    return r;
}

fn idt_trans_sym_left : (p : Id'(a, a1, a2)) -> idt_t'(idt_s'(p), p) == idt_r'(a2) {
    axiom idt_trans_sym_left :
        (p : Id'(a, a1, a2)) -> idt_t'(idt_s'(p), p) == idt_r'(a2);
    x : (p : Id'(a, a1, a2));
    let r = idt_trans_sym_left(x) : idt_t'(idt_s'(p), p) == idt_r'(a2);
    return r;
}

fn idt_trans_sym_right : (p : Id'(a, a1, a2)) -> idt_t'(p, idt_s'(p)) == idt_r'(a1) {
    axiom idt_trans_sym_right :
        (p : Id'(a, a1, a2)) -> idt_t'(p, idt_s'(p)) == idt_r'(a1);
    x : (p : Id'(a, a1, a2));
    let r = idt_trans_sym_right(x) : idt_t'(p, idt_s'(p)) == idt_r'(a1);
    return r;
}

fn idt_sym_sym : (p : Id'(a, a1, a2)) -> idt_s'(idt_s'(p)) == p {
    axiom idt_sym_sym : (p : Id'(a, a1, a2)) -> idt_s'(idt_s'(p)) == p;
    x : (p : Id'(a, a1, a2));
    let r = idt_sym_sym(x) : idt_s'(idt_s'(p)) == p;
    return r;
}

fn idt_trans_assoc : true -> idt_t'(p, idt_t'(q, r)) == idt_t'(idt_t'(p, q), r) {
    axiom idt_trans_assoc : true -> idt_t'(p, idt_t'(q, r)) == idt_t'(idt_t'(p, q), r);
    x : true;
    let r = idt_trans_assoc(x) : idt_t'(p, idt_t'(q, r)) == idt_t'(idt_t'(p, q), r);
    return r;
}

