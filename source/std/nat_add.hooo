
/*
Addition of natural numbers.
*/

sym add;

use cong;

use nat;
use z;
use s;

fn nat_add_cong : true -> cong'(add') {
    axiom nat_add_cong : true -> cong'(add');

    x : true;

    let r = nat_add_cong(x) : cong'(add');
    return r;
}

fn nat_add_zero : (x : nat') -> add'(x, z') == x {
    axiom nat_add_zero : (x : nat') -> add'(x, z') == x;

    x : (x : nat');

    let r = nat_add_zero(x) : add'(x, z') == x;
    return r;
}

fn nat_add_succ : (x : nat') & (y : nat') -> add'(x, s'(y)) == s'(add'(x, y)) {
    axiom nat_add_succ :
        (x : nat') & (y : nat') -> add'(x, s'(y)) == s'(add'(x, y));

    x : (x : nat');
    x2 : (y : nat');

    let r = nat_add_succ(x, x2) : add'(x, s'(y)) == s'(add'(x, y));
    return r;
}
