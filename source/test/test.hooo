
fn test_sym_block : sym(a, a') -> sym(b, b') {
    x : sym(b, b');
    return x;
}

fn test_sym_block_2 : sym(a, all(a' | b))(c) -> c | b {
    x : sym(a, all(a' | b))(c);
    let r = x() : c | b;
    return r;
}

fn test_sym_block_3 : a -> sym(b, b')(a) {
    x : a;
    let r = x() : sym(b, b')(a);
    unsafe return r;
}

fn test_sym_block_5 : all(a) -> sym(b, b')(a) {
    x : all(a);
    let r = x() : sym(b, b')(a);
    unsafe return r;
}

fn test_sym_block_6 : true -> true {
    x : true;
    
    axiom y : all((a => c) -> c);
    let y2 = y() : sym(b, a => c)(b) -> c;

    let r = () : true;
    return r;
}

fn test_sym_block_7 : sym(a, all(a'))(a) -> a {
    x : sym(a, all(a'))(a);
    let r = x() : a;
    return r;
}

/* // This test should fail.
sym a;
fn test_sym_block_8 : a -> a' {
    use std::sym_unwrap;
    x : a;
    let x2 = x() : sym(a, a')(a);
    let r = sym_unwrap(x2) : a';
    return r;
}
*/

