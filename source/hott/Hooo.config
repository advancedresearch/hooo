name: "hott";
version: "0.1.0";
description: "add your description here";
functions {
  HLev : HLev';
  contr_eq : x -> (HLev'(z', x) == HLev'(z', true));
  contr_tr : true -> HLev'(z', true);
  contr_unit : true -> (true : true);
  hlev_cong : (n : nat') -> cong'(HLev'(n));
  hlev_contr_to_prop : HLev'(z', x) -> HLev'(s'(z'), x);
  hlev_eq_right : ((n : nat') & (x == y)) -> (HLev'(n, x) == HLev'(n, y));
  hlev_prop : HLev'(s'(z'), x) -> (((a : x) & (b : x)) => ((a ~~ b) : I' => x));
  hlev_set : (HLev'(s'(s'(z')), x) & ((a : x) & (b : x))) -> (((p : (a ~~ b) : I' => x) & (q : (a ~~ b) : I' => x)) => ((p ~~ q) : I' => ((a ~~ b) : I' => x)));
  hlev_sn : (n : nat') -> (HLev'(s'(n), x) == sym(n, sym(x, all(((a : x') & (b : x')) => HLev'(n', (a ~~ b) : I' => x'))))(n, x));
  hlev_sn_from : ((n : nat') & sym(n, sym(x, all(((a : x') & (b : x')) => HLev'(n', (a ~~ b) : I' => x'))))(n, x)) -> HLev'(s'(n), x);
  hlev_sn_to : ((n : nat') & HLev'(s'(n), x)) -> sym(n, sym(x, all(((a : x') & (b : x')) => HLev'(n', (a ~~ b) : I' => x'))))(n, x);
  hlev_sn_to_concrete : ((n : nat') & HLev'(s'(n), x)) -> (((a : x) & (b : x)) => HLev'(n, (a ~~ b) : I' => x));
  hlev_z : true -> (HLev'(z', x) == x);
  hlev_z_from : x -> HLev'(z', x);
  hlev_z_to : HLev'(z', x) -> x;
  path_fa : ((a : false) & (b : false)) -> ((a ~~ b) : !I');
  path_tr : ((a : true) & (b : true)) -> ((a ~~ b) : I' => true);
}
dependencies {
}
